version: "3"

services:
  nginx:
    build:
      context: ./
      dockerfile: nginx/Dockerfile
      args:
        - NGINX_CONF_PATH=$NGINX_CONF
        - SSL_CERTIFICATE_FILENAME_ARG=$SSL_CERTIFICATE_FILENAME
        - SSL_CERTIFICATE_KEY_FILENAME_ARG=$SSL_CERTIFICATE_KEY_FILENAME
        - DOMAIN_NAME_ARG=$DOMAIN_NAME
    restart: always
    depends_on:
      - web-client
      - web-server
    ports:
      - "80:80"
      - "443:443"
    environment:
      SSL_CERTIFICATE_FILENAME: "${SSL_CERTIFICATE_FILENAME}"
      SSL_CERTIFICATE_KEY_FILENAME: "${SSL_CERTIFICATE_KEY_FILENAME}"
      NGINX_CONF: "${NGINX_CONF}"
    volumes:
      - files-volume:/usr/src/app/files
      - ./static:/usr/src/app/static
      - ${SSL_CERTIFICATE}:/etc/ssl/${SSL_CERTIFICATE_FILENAME}
      - ${SSL_CERTIFICATE_KEY}:/etc/ssl/${SSL_CERTIFICATE_KEY_FILENAME}

  web-client:
    build:
      context: ./
      dockerfile: frontend/Dockerfile
    container_name: web-client-container
    ports:
      - "3000:3000"

  web-server:
    build:
      context: ./
      dockerfile: backend/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: unless-stopped
    container_name: web-server-container
    depends_on:
      - redis
      - postgres
    links:
      - postgres
    env_file:
      - ${BACKEND_ENV}
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
      POSTGRES_HOST: "postgres"
    ports:
      - "8000:8000"
    volumes:
      - proj-db-volume:/usr/src/app/instance
      - files-volume:/usr/src/app/backend/files

  web-celery:
    build:
      context: ./
      dockerfile: backend/api/celery/Dockerfile
      args:
        DOCKER_BUILDKIT: 1
    restart: unless-stopped
    container_name: web-celery-container
    depends_on:
      - web-server
      - redis
      - postgres
    links:
      - postgres
    env_file:
      - ${BACKEND_ENV}
    environment:
      CELERY_BROKER_URL: "redis://default:${REDIS_PASSWORD}@redis:6379/1"
      CELERY_RESULT_BACKED: "redis://default:${REDIS_PASSWORD}@redis:6379/1"
      POSTGRES_HOST: "postgres"
    volumes:
      - proj-db-volume:/usr/src/app/instance

  redis:
    image: redis
    restart: always
    env_file:
      - ${BACKEND_ENV}
    command: bash -c  "redis-server --appendonly yes --requirepass $$REDIS_PASSWORD"
    expose:
      - "6379"

  ldap-server:
    build:
      context: ./
      dockerfile: backend/ldap/Dockerfile
    container_name: ldap-server-container
    environment:
      LDAP_ORGANISATION: "People"
      LDAP_ADMIN_PASSWORD: "1234"
      LDAP_DOMAIN: "example.com"
    profiles: ["ldap-server"]

  ldap-load-data-conf:
    build:
      context: ./
      dockerfile: backend/ldap/ldap-load-data-conf/Dockerfile
    container_name: ldap-load-data-container
    depends_on:
      - ldap-server
    environment:
      LDAP_HOST: "ldap-server"
    profiles: ["ldap-load-data-conf"]

  postgres:
    image: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - ${BACKEND_ENV}
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data/

volumes:
  proj-db-volume:
  files-volume:
  postgres-db-volume: