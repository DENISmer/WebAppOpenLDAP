version: "3"

services:
  nginx:
    image: nginx
    restart: always
    depends_on:
      - web-client
      - web-server
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d/prod.conf:/etc/nginx/conf.d/prod.conf
      - files-volume:/usr/src/app/files
      - ./static:/usr/src/app/static
      - /var/lib/certs/pki/ca.crt:/var/lib/certs/pki/ca.crt
      - /var/lib/certs/pki/private/admin.icc.local.net.key:/var/lib/certs/pki/private/admin.icc.local.net.key
  web-client:
    build:
      context: ./
      dockerfile: frontend/Dockerfile
    container_name: web-client-container
    ports:
      - "3000:3000"

  web-server:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    container_name: web-server-container
    depends_on:
      - redis
    env_file:
      - backend/prod.env
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    ports:
      - "8000:8000"
    volumes:
      - proj-db-volume:/usr/src/app/instance
      - files-volume:/usr/src/app/backend/files

  web-celery:
    build:
      context: .
      dockerfile: backend/api/celery/Dockerfile
    restart: unless-stopped
    container_name: web-celery-container
    depends_on:
      - web-server
      - redis
    env_file:
      - ./backend/prod.env
    environment:
      CELERY_BROKER_URL: "redis://default:${REDIS_PASSWORD}@redis:6379/1"
      CELERY_RESULT_BACKED: "redis://default:${REDIS_PASSWORD}@redis:6379/1"
    volumes:
      - proj-db-volume:/usr/src/app/instance

  redis:
    image: redis
    restart: always
    env_file:
      - backend/prod.env
    command: bash -c  "redis-server --appendonly yes --requirepass $$REDIS_PASSWORD"
    expose:
      - "6379"

  ldap-server:
    build:
      context: .
      dockerfile: backend/ldap/Dockerfile
    container_name: ldap-server-container
    environment:
      LDAP_ORGANISATION: "People"
      LDAP_ADMIN_PASSWORD: "1234"
      LDAP_DOMAIN: "example.com"
    profiles: ["ldap-server"]

  ldap-load-data-conf:
    build:
      context: .
      dockerfile: backend/ldap/ldap-load-data-conf/Dockerfile
    container_name: ldap-load-data-container
    depends_on:
      - ldap-server
    environment:
      LDAP_HOST: "ldap-server"
    profiles: ["ldap-load-data-conf"]

volumes:
  proj-db-volume:
  files-volume: